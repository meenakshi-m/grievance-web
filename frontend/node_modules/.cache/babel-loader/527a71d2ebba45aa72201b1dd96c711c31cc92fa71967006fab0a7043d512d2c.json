{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\Documents\\\\GitHub\\\\my grievance web\\\\GWE\\\\frontend\\\\src\\\\components\\\\GrievanceForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { submitGrievance } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GrievanceForm = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    email: '',\n    // This will be set from the logged-in user's info\n    type: '',\n    title: '',\n    description: '',\n    document: null // For file upload\n  });\n  const [message, setMessage] = useState(''); // For storing success or error messages\n\n  // Simulate getting logged-in user's email from context or local storage\n  useEffect(() => {\n    const userEmail = localStorage.getItem('userEmail'); // Assume the email is stored in localStorage upon login\n    setFormData(formData => ({\n      ...formData,\n      email: userEmail\n    }));\n  }, []);\n  const handleChange = e => {\n    if (e.target.name === 'document') {\n      setFormData({\n        ...formData,\n        document: e.target.files[0]\n      });\n    } else {\n      setFormData({\n        ...formData,\n        [e.target.name]: e.target.value\n      });\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      await submitGrievance(formData);\n      setMessage('Grievance submitted successfully!');\n      setFormData({\n        email: formData.email,\n        type: '',\n        title: '',\n        description: '',\n        document: null\n      });\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setMessage(`Error submitting grievance: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Server error'}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grievance-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        value: formData.email,\n        readOnly: true // Make email field read-only\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(GrievanceForm, \"6CRyZQ6LJa+GZX0JEqDeaRjjat0=\");\n_c = GrievanceForm;\nexport default GrievanceForm;\nvar _c;\n$RefreshReg$(_c, \"GrievanceForm\");","map":{"version":3,"names":["React","useState","useEffect","submitGrievance","jsxDEV","_jsxDEV","GrievanceForm","_s","formData","setFormData","email","type","title","description","document","message","setMessage","userEmail","localStorage","getItem","handleChange","e","target","name","files","value","handleSubmit","preventDefault","error","_error$response","_error$response$data","response","data","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/asus/Documents/GitHub/my grievance web/GWE/frontend/src/components/GrievanceForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { submitGrievance } from '../services/api';\r\n\r\nconst GrievanceForm = () => {\r\n  const [formData, setFormData] = useState({\r\n    email: '',  // This will be set from the logged-in user's info\r\n    type: '',\r\n    title: '',\r\n    description: '',\r\n    document: null, // For file upload\r\n  });\r\n\r\n  const [message, setMessage] = useState(''); // For storing success or error messages\r\n\r\n  // Simulate getting logged-in user's email from context or local storage\r\n  useEffect(() => {\r\n    const userEmail = localStorage.getItem('userEmail'); // Assume the email is stored in localStorage upon login\r\n    setFormData(formData => ({ ...formData, email: userEmail }));\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    if (e.target.name === 'document') {\r\n      setFormData({\r\n        ...formData,\r\n        document: e.target.files[0],\r\n      });\r\n    } else {\r\n      setFormData({\r\n        ...formData,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      await submitGrievance(formData);\r\n      setMessage('Grievance submitted successfully!');\r\n      setFormData({ email: formData.email, type: '', title: '', description: '', document: null });\r\n    } catch (error) {\r\n      setMessage(`Error submitting grievance: ${error.response?.data?.message || 'Server error'}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"grievance-form-container\">\r\n      <form onSubmit={handleSubmit}>\r\n        <label>Email</label>\r\n        <input \r\n          type=\"email\" \r\n          name=\"email\" \r\n          value={formData.email}\r\n          readOnly  // Make email field read-only\r\n        />\r\n\r\n        {/* Other fields remain editable */}\r\n        {/* Type, Title, Description, and Document fields here */}\r\n        {/* The rest of the form follows as before */}\r\n      </form>\r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GrievanceForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}